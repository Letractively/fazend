#summary Object persistency
#labels Phase-Requirements

= Usage =

The class automatically creates a table in the default DB (`fz_registry`).

All of the these are the same:

{{{
$car = new Car('cars/bmw/bmw328i'); // instance of FaZend_Registry_Object
}}}

Any object you get from the registry can be managed like this:

{{{
$car->getVersion(); // version of the document, instance of class FaZend_Registry_Version
$car->getVersion()->__toString(); // 1.0, 2.13, 15.76, etc.
$car->getName(); // = 'bmw328i'
$car->getValue(); // similar to __toString()
$car->getParent(); // the parent object, instance of FaZend_Registry_Object
$car->getId(); // unique ID of the object, like 634527
$car->getParent()->getChild('bmw750iL'); // returns FaZend_Registry_Object: cars/bmw/bmw750iL
$car->getPath(); // returns string: 'cars/bmw/bmw328i'
$car->getComment(); // the comment of the latest edition
$car->getUpdated(); // the date/time when this object was last time updated
$car->getEditor(); // returns FaZend_User
}}}

You can list all kid-objects as an array:

{{{
foreach (new Cars('cars/bmw') as $car)
  echo $car->name;
}}}

Some operations on the object:

{{{
$car->setValue('new value'); // set new value
$car->setValue('new value', 'comment'); // save the value and comment the change
$car->rename('bmw328i brand new'); // will change the name of the object
$car->moveTo(new Cars('mercedes')); // moves the object to another object
$car->copyTo(new Cars('my best cars')); // copies the object
$car->delete(); // delete the object (set status to "deleted")
$car->wipe(); // removes from the registry forever
$car->deleteChilds(); // delete all sub objects
}}}

Some nice functions on objects:

{{{
$car->getAge(); // returns the age of the object, in seconds
$car->getVersions(); // returns a list of FaZend_Registry_Version 
}}}

You can setup an access control object, which will be responsible for user access rights management for any particular object. Before any operation FaZend_Registry will ask this `ACL` whether this operation is permitted or not, giving the object name to it:

{{{
FaZend_Registry::setACL(new Zend_ACL());
}}}

You can baseline, request approval, approve and reject objects:

{{{
$car->baseline(); // baseline the object
$car->requestApproval(); // request approval
$car->approve(); // approve the object in its current version by current user
$car->reject(); // reject the object 
}}}

You can roll back changes to any particular version:

{{{
$car->rollBack(13); // roll back all changes in this object to version no.13
}}}

= Make your own objects =

You can keep your objects in the registry:

{{{
class Car extends FaZend_Registry_Object {
  public $color;
  public $speed;
  function isGermanCar() {
    if (preg_match('/^bmw/', $this->name)
      return true;
    return false;
  }
}

$car = new Car('cars/bmw/bmw328i'); // get or create a new object in registry
$car->isGermanCar(); // returns TRUE
$car->color = 'red'; // saves this into object and into DB
$car->speed = '250km/h'; // same story
}}}