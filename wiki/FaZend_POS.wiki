#summary Persistence Object Storage (POS), prototype
#labels Phase-Design

The idea is to create a flexible storage of PHP objects in the DB, without the necessity to create many tables for them. Even bigger strategic goal is to create a good platform for "application server"-like applications in PHP.

To implement this functionality the FaZend_POS class will automatically create DB table: `fz_pos`. Everything will be stored in one table (_this is the idea so far_).

= Usage samples =

You create a new object and assign it to the storage (POS):

{{{
class Car extends FaZend_POS_Object {
    public $color = 'white';
    public $model;

    public isGermanCar() {
        if ($model == 'bmw')
            return true;
        return false;
    }
}

FaZend_POS::root()->bmw328 = new Car();
}}}

You can create a simple object as well:

{{{
$root = FaZend_POS::root();
$root->cars = array();
$bmw = new Car();
$root->cars[] = $bmw;
$bmw->color = 'black';
$bwm->model = 'bmw';
}}}

Later, in another part of the application:

{{{
$bmw = current(FaZend_POS::root()->cars);
echo $bmw->isGermanCar(); // returns TRUE
echo FaZend_POS::root()->bmw328i->color; // returns 'white'
}}}

You can delete an object, or wipe it out (delete forever):

{{{
$car = FaZend_POS::root()->bmw328i;
$car->delete(); // still in storage, but marked as deleted
$car->wipe(); // wipe it out, no more information in storage about it
}}}

Objects can include objects, and FaZend_POS will understand such links. Objects won't be copied, but symbolic links will be created.

= Version Control =

Changes are under control, like in Subversion repository:

{{{
$car = FaZend_POS::root()->bmw328i;
$pos = $car->pos(); // FaZend_POS_Properties - system properties of the object
$pos->editor; // FaZend_User with the editor of latest changes
$pos->version; // FaZend_POS_Version of the latest version
$pos->updated; // time when the object was updated last time
$pos->id; // int - unique id of the object in storage
$pos->type; // full name of the class for this object
}}}

You can play with versions:

{{{
$car = FaZend_POS::root()->bmw328i;
$version = $car->pos()->version;
$car->pos()->workWithVersion($version - 1); // now the object has data from previous version
$car->pos()->setTimeBoundary(time() - 60*60); // ignore any changes made during the last hour
$car->pos()->rollBack($version - 1); // roll back all changes to previous version
$car->pos()->getVersions(10); // returns an array of 10 latest version
$car->pos()->getAge(); // returns object age in storage, in seconds
}}}

= Access Control =

You can setup an access control object, which will be responsible for user access rights management for any particular object. Before any operation `FaZend_POS` will ask this `ACL` whether this operation is permitted or not, giving the object name to it:

{{{
FaZend_POS::root()->setACL(new Zend_ACL());
}}}

= Objects' Approval =

You can baseline any object and request approval from other users. They can approve or reject.

{{{
$car = FaZend_POS::root()->bmw328i;
$mary = new FaZend_User(13);
$car->pos()->baseline(array($mary));
}}}

Later, Mary is current user:

{{{
$car = FaZend_POS::root()->bmw328i;
if ($car->pos()->waitingForApproval()) {
    if ($car->isGermanCar())
        $car->pos()->approve();
    else
        $car->pos()->reject();
}
}}}

You can check the status of the object's approval:

{{{
$car = FaZend_POS::root()->bmw328i;
$car->pos()->isApproved();
$car->pos()->isBaselined();
$car->pos()->isRejected();
}}}

= Other ideas =

Maybe `xpath()` search on the full storage is a good option.